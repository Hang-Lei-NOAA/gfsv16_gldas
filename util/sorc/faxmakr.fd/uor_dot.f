      SUBROUTINE UOR_DOT(XUORS,YUORS,IDOT,JDOT,IUOPTN)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    UOR_DOT      CONVERT UORS COORDINATES
C   PRGMMR: KRISHNA KUMAR       ORG: W/NP12   DATE: 1999-08-01
C
C ABSTRACT: TO CONVERT COORDINATES (IN UORS) FROM THE INTERGRAPH'S
C   NORAMPO MAP (M:100CM:1000) AT 1:10MILLION REDUCTION SCALE INTO
C   IDOT,JDOT (IN PIXELS) ON 1:20M OR 1:40M SCALE.
C
C PROGRAM HISTORY LOG:
C   87-MM-DD  SHIMOMURA; ORIGINAL AUTHOR.
C   89-03-30  R. CHEN; ADD OPTION FOR U.S BACKGROUND NH1302.
C   89-06-07  R. CHEN; ADD THIS DOC BLOCK.
C   90-11-27  R. CHEN; ADD AWIPS N. AMERICAN MAP BACKGROUND. (PNAM02).
C   94-02-10  SHIMOMURA; PORT TO INTERGRAPH UNIX WRKSTN;  MOVED ARG
C                        "LISNHAWIP" FROM COMMON TO CALL SEQ.
C   95-06-28  L. LIN; MODIFY FOR CRAY.
C   95-06-30  L. LIN; ADD OPTION FOR NH4004.
C   96-06-20  L. LIN; ADD OPTION FOR NH4006.
C   96-11-05  L. LIN; ADD OPTION FOR NH4005.
C 1999-08-01  KRISHNA KUMAR CONVERTED THIS CODE FROM CRAY TO IBM RS/6000.
C
C USAGE:    CALL UOR_DOT(XUORS,YUORS,IDOT,JDOT,IUOPTN)
C   INPUT ARGUMENT LIST:
C     XUORS    - REAL*4; X COORDINATES IN UORS.
C     YUORS    - REAL*4; Y COORDINATES IN UORS.
C     IUOPTN   - INTEGER*4; FOR MAP BACKGROUND OPTION SELECTION.
C                =1 - NH1302; =2 - NH4006; =3 - NH2002; =4 - PNAM02.
C                =5 - NH4004
C
C   OUTPUT ARGUMENT LIST:
C     IDOT     - INTEGER*4; COVERTED X COORDINATES IN PIXELS.
C     JDOT     - INTEGER*4; COVERTED Y COORDINATES IN PIXELS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  IBM
C
C$$$
C
       COMMON /UOR2D/ UGRIDT1,UXPO,UYPO,UXADJUS,UYADJUS,UCU2GI,UORFG,
     1                IP,IPOPT
       REAL     UGRIDT1,UXPO,UYPO,UXADJUS,UYADJUS,UCU2GI
       LOGICAL  UORFG
C
       REAL       XUORS,YUORS
       INTEGER    IDOT,JDOT
       INTEGER    IUOPTN
C      LOGICAL    LISNHAWIP
C
       REAL     T1(8)
       REAL     XPO(8)
       REAL     YPO(8)
       REAL     XADJUS(8)
       REAL     YADJUS(8)
       REAL     CU2GI(8)
C
       REAL    XPOLE,YPOLE
       REAL    DOTSGI
       REAL    CUORGR
       REAL    ADJUSX
       REAL    ADJUSY
C ...  ADJUSX, ADJUSY ARE THE DISPLACEMENT RELATIVE TO POLE.
C
       DATA     T1     / 54.0,  37.5, 37.5, 37.5, 37.5, 36.0, 28.846,
     1                   30.0 /
       DATA     XPO    / 17.0,  33.0, 27.0, 33.0, 33.0, 33.0, 27.0,
     1                   27.0 /
       DATA     YPO    / 46.0,  33.0, 46.0, 45.0, 33.0, 33.0, 49.0,
     1                   49.0 /
       DATA     XADJUS / -1.0,  -8.0,  0.0,  0.0, -9.0, -9.0,-12.0,
     1                   -3.0 /
       DATA     YADJUS / -5.0,  -0.0,  0.0,  0.0, -7.0, -7.0, -7.0,
     1                   -3.0 /
       DATA     CU2GI  / 1905.0, 3810.0, 1905.0, 1905.0, 3810.0,
     1                       3810.0, 1905.0, 1905.0 /
C
C
C ...  IUOPTN=1  FOR 43*31 LFM SUBSET W/ 105W VERTICAL. 1:13M - NH1302.
C ...  IUOPTN=2  FOR 65*65 N.HEMI 1/40M W/ 105W VERTI.  1:40M - NH4006.
C ...  IUOPTN=3  FOR 53*57 FULL LFM GRID W/ 105W VERTI. 1:20M - NH2002.
C ...  IUOPTN=4  FOR 65*43 FULL LFM GRID W/ 105W VERTI. 1:20M - PNAM02.
C ...  IUOPTN=5  FOR 65*65 N.HEMI 1/40M W/  80W VERTI.  1:40M - NH4004.
C ...  IUOPTN=6  FOR 65*65 N.HEMI 1/40M W/  80W VERTI.  1:40M - NH4005.
C ...  IUOPTN=7  FOR 53*57 FULL LFM GRID W/ 105W VERTI. 1:26M - PN2601.
C
C      PRINT *, ' ',IUOPTN,' UXPO=',UXPO,' UYPO=', UYPO,' t1=',ugridt1
       IF (UORFG) THEN
C          .... CONSTANTS FROM INPUT CARDS
           CUORGR = UCU2GI
           XPOLE = UXPO
           YPOLE = UYPO
           DOTSGI = UGRIDT1
           ADJUSX = UXADJUS
           ADJUSY = UYADJUS
       ELSE
C          .... CONSTANTS FROM OPTION
           ISS = IUOPTN
           IF((ISS .LT. 1) .OR. (ISS .GT. 8)) ISS = 2
           CUORGR = CU2GI(ISS)
           XPOLE = XPO(ISS)
           YPOLE = YPO(ISS)
           DOTSGI = T1(ISS)
           ADJUSX = XADJUS(ISS)
           ADJUSY = YADJUS(ISS)
       ENDIF
C
C        PRINT *, ' ADJUSX=', ADJUSX, '  ADJUSY=', ADJUSY
C        print *,' xpol=',xpole,' ',ypole,' ', cuorgr
         XGRID = XUORS / CUORGR
         YGRID = YUORS / CUORGR
         XLFMG = XGRID + XPOLE + ADJUSX
         YLFMG = YGRID + YPOLE + ADJUSY
         IDOT  = ((XLFMG - 1.0) * DOTSGI) + 0.5
         JDOT  = ((YLFMG - 1.0) * DOTSGI) + 0.5
C
       RETURN
       END
C
